// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Recipe {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  ingredients  String[]
  instructions String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  imageUrl     String?
  qtCounter    Int
  // rating       Rating[]

  batch    Batch[]  @relation(fields: [batchIds], references: [id])
  batchIds String[] @db.ObjectId
}

type Rating {
  userId String
  rate   Int
}

model Batch {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  ingredients  String[]
  instructions String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  recipeNames  String[]
  creator      String?
  description  String?
  name         String?
  // rating       Rating[]

  recipeIds String[] @db.ObjectId
  recipes   Recipe[] @relation(fields: [recipeIds], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  role               String?
  batch              String[]
  lockBatchExpiresAt DateTime?

  accounts Account[]
  sessions Session[]
  batchs   Batch[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
